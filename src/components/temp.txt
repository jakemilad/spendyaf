I'll help you create a component that allows users to manage their transaction categories. We'll need to:
Create a database table for custom categories
Update the settings component to manage categories
Modify the OpenAI API to use user-specific categories
First, let's create the categories table in your database schema:

model Category {
  id        String   @id @default(cuid())
  name      String
  userId    String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([name, userId])
}

// Add to User model
model User {
  // ... existing fields ...
  categories Category[]
}

Now, let's update the settings component to manage categories:

'use client'

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Plus, X } from 'lucide-react'
import { CATEGORIES } from '@/app/utils/dicts'

interface Category {
  id: string
  name: string
  isDefault: boolean
}

export default function SettingsCategories() {
  const [categories, setCategories] = useState<Category[]>([])
  const [newCategory, setNewCategory] = useState('')
  const [isLoading, setIsLoading] = useState(false)

  useEffect(() => {
    fetchCategories()
  }, [])

  const fetchCategories = async () => {
    try {
      const response = await fetch('/api/categories')
      const data = await response.json()
      setCategories(data)
    } catch (error) {
      console.error('Failed to fetch categories:', error)
    }
  }

  const addCategory = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!newCategory.trim()) return

    setIsLoading(true)
    try {
      const response = await fetch('/api/categories', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name: newCategory.trim() }),
      })
      
      if (response.ok) {
        await fetchCategories()
        setNewCategory('')
      }
    } catch (error) {
      console.error('Failed to add category:', error)
    }
    setIsLoading(false)
  }

  const deleteCategory = async (id: string) => {
    try {
      await fetch(`/api/categories/${id}`, { method: 'DELETE' })
      await fetchCategories()
    } catch (error) {
      console.error('Failed to delete category:', error)
    }
  }

  return (
    <div className="container mx-auto py-6 px-4">
      <h1 className="text-2xl font-bold mb-6">Transaction Categories</h1>
      
      <form onSubmit={addCategory} className="flex gap-2 mb-6">
        <Input
          type="text"
          value={newCategory}
          onChange={(e) => setNewCategory(e.target.value)}
          placeholder="Add new category..."
          className="max-w-xs"
        />
        <Button type="submit" disabled={isLoading}>
          <Plus className="h-4 w-4 mr-2" />
          Add
        </Button>
      </form>

      <div className="grid gap-2">
        {categories.map((category) => (
          <div
            key={category.id}
            className="flex items-center justify-between p-3 bg-card rounded-lg"
          >
            <span className="flex items-center gap-2">
              {category.name}
              {category.isDefault && (
                <span className="text-xs bg-muted px-2 py-1 rounded">Default</span>
              )}
            </span>
            {!category.isDefault && (
              <Button
                variant="ghost"
                size="sm"
                onClick={() => deleteCategory(category.id)}
              >
                <X className="h-4 w-4" />
              </Button>
            )}
          </div>
        ))}
      </div>
    </div>
  )
}


Create an API route to handle category operations:
import { NextResponse } from 'next/server'
import { auth } from '@clerk/nextjs'
import prisma from '@/lib/prisma'
import { CATEGORIES } from '@/app/utils/dicts'

export async function GET() {
  const { userId } = auth()
  if (!userId) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
  }

  const categories = await prisma.category.findMany({
    where: { userId },
    orderBy: { createdAt: 'asc' },
  })

  return NextResponse.json(categories)
}

export async function POST(req: Request) {
  const { userId } = auth()
  if (!userId) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
  }

  const { name } = await req.json()
  
  try {
    const category = await prisma.category.create({
      data: {
        name,
        userId,
      },
    })
    return NextResponse.json(category)
  } catch (error) {
    return NextResponse.json({ error: 'Failed to create category' }, { status: 500 })
  }
}


Finally, update the OpenAI API function to use user-specific categories:
// ... existing imports ...

export async function openAICategories(merchants: string[], userId: string) {
    // Fetch user's categories
    const categories = await prisma.category.findMany({
        where: { userId },
        select: { name: true }
    });
    
    const categoryNames = categories.map(c => c.name);
    
    const prompt = `You are categorizing a list of merchants into the following categories:
${categoryNames.join(', ')}.

// ... rest of the existing prompt ...`;

    // ... rest of the existing function ...
}
You'll need to run the following seed script to populate default categories:
)
This implementation:
Creates a database table for categories
Provides a UI to add/remove custom categories
Preserves default categories
Updates the OpenAI API to use user-specific categories
Includes API routes to manage categories
Remember to:
Run the database migrations
Run the seed script to populate default categories
Update any components that use the OpenAI API to pass the userId parameter